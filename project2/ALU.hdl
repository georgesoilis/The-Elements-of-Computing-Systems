/**
 * The ALU. Computes one of the following functions:
 * x+y, x-y, y–x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * The bit-combinations that yield each function are 
 * documented in the book. In addition, the ALU 
 * computes two 1-bit outputs: if the ALU output
 * is 0, zr is set to 1; otherwise zr is set to 0;
 * If out<0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU manipulates the x and y
// inputs and then operates on the resulting values, 
// as follows:
// if (zx==1) set x = 0        // 16-bit constant
// if (nx==1) set x = ~x       // bitwise "not"
// if (zy==1) set y = 0        // 16-bit constant
// if (ny==1) set y = ~y       // bitwise "not"
// if (f==1)  set out = x + y  // integer 2's complement addition
// if (f==0)  set out = x & y  // bitwise "and"
// if (no==1) set out = ~out   // bitwise "not"
// if (out==0) set zr = 1
// if (out<0) set ng = 1

  
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute  out = x + y (if 1) or out = x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out==0), 0 otherwise
        ng; // 1 if (out<0),  0 otherwise

    PARTS:
        // perform the initial input bus filtering based on
        // the 1st 4 flags
        Mux16(a=x, b=false, sel=zx, out=xPass1);
        Mux16(a=y, b=false, sel=zy, out=yPass1);

        ConditionalNegate16(in=xPass1, sel=nx, out=xPass2);
        ConditionalNegate16(in=yPass1, sel=ny, out=yPass2);

        // Add / and the two busses
        And16(a=xPass2, b=yPass2, out=addResult);
        Add16(a=xPass2, b=yPass2, out=andResult);

        // Choose which of these two results we want
        Mux16(a=addResult, b=andResult, sel=f, out=calculatedResult);

        // Negate if required 
        // 
        // (1) Wire the output into an internal representation for calculation zr
        // (2) Send the output to the output bus
        // (3) The 16th bit of the final number tells us
        //     if the whole thing is negative or not in a two's compliment based
        //     representation of an integer - so wire this into the ng output
        ConditionalNegate16(in=calculatedResult, sel=no, out=finalOutput, out=out, out[15]=ng);
        
        // 16 way or to tell us if any of the outputs are non-zero. The negatable
        // switch is set to true as we want this to return true if the result is
        // 0 not if any of the outputs are non-zero
        NegatableOr16Way(in=finalOutput, sel=true, out=zr);
}
